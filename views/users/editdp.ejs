<% layout('layouts/boilerplate') %>
<script
  src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"
  integrity="sha512-ooSWpxJsiXe6t4+PPjCgYmVfr1NS5QXJACcR/FPpsdm6kqG1FmQ2SVyg2RXeVuCRBLr0lWHnWJP6Zs1Efvxzww=="
  crossorigin="anonymous"
  referrerpolicy="no-referrer"
></script>

<div class="container mx-width mt-4 mt-sm-5 w-90">
  <h1 class="fs-3 mb-4" id="change-profile">Change profile photo</h1>
  <form
    action="/accounts/dp?_method=PUT"
    method="POST"
    novalidate
    class="needs-validation"
    enctype="multipart/form-data"
  >
    <div class="mb-4">
      <input
        class="form-control"
        type="file"
        name="image"
        id="id_image"
        accept="image/jpg, image/jpeg, image/png"
        required
      />
    </div>
    <div id="image-box" class="image-container" style="max-height: 50vh"></div>
    <button
      class="btn btn-outline-info mt-4"
      id="crop-btn"
      style="width: 100%; margin-top: 10px; display: none"
      type="button"
    >
      Next
    </button>
    <div class="d-grid">
      <button class="btn btn-primary spinner" id="confirm-btn">
        Upload Photo
      </button>
    </div>
  </form>
  <form
    action="/accounts/dp?_method=DELETE"
    method="POST"
    class="mt-4 delete-form"
  >
    <div class="d-grid mb-4">
      <button class="btn btn-outline-danger spinner" id="remove-btn">
        Remove Current Photo
      </button>
    </div>
  </form>
</div>

<script>
  // For spinner
  const deleteForm = document.querySelector('.delete-form');
  if (deleteForm) {
    const spinner = deleteForm.querySelector('.spinner');
    deleteForm.addEventListener('submit', () => {
      spinner.disabled = true;
      spinner.innerHTML = `<div class="spinner-border spinner-border-sm text-danger" role="status">
                <span class="sr-only">Loading...</span>
                </div>`;
    });
  }

  // image-box is the id of the div element that will store our cropping image preview
  const imagebox = document.getElementById('image-box');
  // crop-btn is the id of button that will trigger the event of change original file with cropped file.
  const crop_btn = document.getElementById('crop-btn');
  // id_image is the id of the input tag where we will upload the image
  const input = document.getElementById('id_image');

  //Stop context menu from popping up
  imagebox.oncontextmenu = (e) => {
    e.preventDefault();
    e.stopPropagation();
    return false;
  };

  // When user uploads the image this event will get triggered
  input.addEventListener('change', () => {
    // Getting image file object from the input variable
    const img_data = input.files[0];
    // createObjectURL() static method creates a DOMString containing a URL representing the object given in the parameter.
    // The new object URL represents the specified File object or Blob object.
    const url = URL.createObjectURL(img_data);

    // Creating a image tag inside imagebox which will hold the cropping view image(uploaded file) to it using the url created before.
    imagebox.innerHTML = `<img src="${url}" id="image" style="width:100%;">`;

    // Storing that cropping view image in a variable
    const image = document.getElementById('image');

    // Displaying the image box
    document.getElementById('image-box').style.display = 'block';
    // Displaying the Crop buttton
    document.getElementById('crop-btn').style.display = 'block';
    // Hiding the Post button
    document.getElementById('confirm-btn').style.display = 'none';
    document.getElementById('remove-btn').style.display = 'none';
    document.getElementById('change-profile').style.display = 'none';

    // Creating a croper object with the cropping view image
    // The new Cropper() method will do all the magic and diplay the cropping view and adding cropping functionality on the website
    // For more settings, check out their official documentation at https://github.com/fengyuanchen/cropperjs
    const cropper = new Cropper(image, {
      background: false,
      aspectRatio: 1 / 1,
      autoCropArea: 1,
      viewMode: 1,
      scalable: false,
      zoomable: false,
      movable: false,
      center: false,
      minCropBoxWidth: 50,
      minCropBoxHeight: 50,
    });
    // When crop button is clicked this event will get triggered
    crop_btn.addEventListener('click', () => {
      // This method coverts the selected cropped image on the cropper canvas into a blob object
      cropper.getCroppedCanvas().toBlob((blob) => {
        // Gets the original image data
        let fileInputElement = document.getElementById('id_image');
        // Make a new cropped image file using that blob object, image_data.name will make the new file name same as original image
        let file = new File([blob], img_data.name, {
          type: 'image/*',
          lastModified: new Date().getTime(),
        });
        // Create a new container
        let container = new DataTransfer();
        // Add the cropped image file to the container
        container.items.add(file);
        // Replace the original image file with the new cropped image file
        fileInputElement.files = container.files;

        // Hide the cropper box
        document.getElementById('image-box').style.display = 'none';
        // Hide the crop button
        document.getElementById('crop-btn').style.display = 'none';
        // Display the Post button
        document.getElementById('confirm-btn').style.display = 'block';
        document.getElementById('change-profile').style.display = 'block';
      });
    });
  });
</script>
